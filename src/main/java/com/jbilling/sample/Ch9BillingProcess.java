package com.jbilling.sample;

import com.sapienter.jbilling.server.process.BillingProcessConfigurationWS;
import com.sapienter.jbilling.server.process.BillingProcessWS;
import com.sapienter.jbilling.server.process.db.ProratingType;
import com.sapienter.jbilling.server.util.Constants;
import com.sapienter.jbilling.server.util.api.JbillingAPI;
import com.sapienter.jbilling.server.util.api.JbillingAPIFactory;

import java.util.Date;
import java.util.GregorianCalendar;

/**
 * jBilling Billing Process examples.
 *
 * @author Bojan Dikovski
 * @since 24-AUG-2016
 */
public class Ch9BillingProcess {

    public static void main(String[] args) throws Exception {

        JbillingAPI api = JbillingAPIFactory.getAPI();
        Integer companyId = api.getCallerCompanyId();

        // Build and save the billing process configuration using createUpdateBillingProcessConfiguration().
        BillingProcessConfigurationWS billingConfig = buildBillingConfig(
                companyId, new GregorianCalendar(2010, 1, 1).getTime(), true,
                ProratingType.PRORATING_AUTO_ON.getProratingType(), Integer.valueOf(99), Constants.PERIOD_UNIT_MONTH);
        api.createUpdateBillingProcessConfiguration(billingConfig);

        // We can start the billing process with triggerBilling(). Note that this is a blocking call.
        // Additionally triggerBillingAsync() can be used to start the process in a new thread (non-blocking).
        System.out.println("Starting review billing process.");
        api.triggerBilling(new GregorianCalendar(2010, 1, 1).getTime());
        System.out.println("Finished running review billing process.");

        // Using isBillingRunning() we can find out if a billing process is running for a given company.
        if (api.isBillingRunning(companyId)) {
            System.out.println("A billing process for company with id: " + companyId +" is running currently.");
        } else {
            System.out.println("A billing process for company with id: " + companyId +" is not running currently.");
        }

        // The last review billing process can be optained by calling getReviewBillingProcess().
        BillingProcessWS reviewRun = api.getReviewBillingProcess();

        // Approving or disapproving the review billing process can be done using setReviewApproval().
        api.setReviewApproval(Boolean.TRUE);

        // We can obtain the existing billing configuration using getBillingProcessConfiguration().
        billingConfig = api.getBillingProcessConfiguration();

        // Updates to the billing configuration are done using createUpdateBillingProcessConfiguration().
        billingConfig.setGenerateReport(Integer.valueOf(0));
        api.createUpdateBillingProcessConfiguration(billingConfig);

        System.out.println("Starting real billing process.");
        api.triggerBilling(new GregorianCalendar(2010, 1, 1).getTime());
        System.out.println("Finished running real billing process.");

        // The id of the last run billing process can be obtained with getLastBillingProcess().
        Integer realRunId = api.getLastBillingProcess();

        // Using getBillingProcess() we can fetch the billing process information.
        BillingProcessWS realRun = api.getBillingProcess(realRunId);

        // The invoices generated by some billing process can be obtained with getBillingProcessGeneratedInvoices().
        Integer[] invoiceIds = api.getBillingProcessGeneratedInvoices(realRunId);
    }

    public static BillingProcessConfigurationWS buildBillingConfig(Integer companyId, Date runDate,
                                                                   Boolean review, String prorating,
                                                                   Integer numPeriods, Integer periodUnitId) {

        BillingProcessConfigurationWS config = new BillingProcessConfigurationWS();
        // Id of the company for which the billing process will be run.
        config.setEntityId(companyId);
        // Date for which the billing process will be run.
        config.setNextRunDate(runDate);
        // Field to set if the next run will be a review run.
        config.setGenerateReport(review ? Integer.valueOf(1) : Integer.valueOf(0));
        // Id of the period unit used for running the billing process.
        config.setPeriodUnitId(periodUnitId);
        // Id of the period unit used for calculation of the due date.
        config.setDueDateUnitId(periodUnitId);
        // Date value for the calculation of the due date.
        config.setDueDateValue(Integer.valueOf(1));
        // If this flag is set invoices will be created using the customer next invoice date instead
        // of the billing process run date.
        config.setInvoiceDateProcess(Integer.valueOf(1));
        // Maximum number of periods to be used in the billing process.
        config.setMaximumPeriods(numPeriods);
        // The billing process will create an invoice for a customer only if a recurring order is present
        // in the given billing period if this flag is set.
        config.setOnlyRecurring(Integer.valueOf(0));
        // Flag used to control how and if prorating will be used in the billing run.
        config.setProratingType(prorating);

        return config;

    }

}
